#include<stdio.h>
#include<conio.h>

#define null 0

struct node
{
 int info;
 struct node *next;
};

int i,x,y,pos,c;

struct node *New,*first,*p,*temp;

// Insert Operation Using Linked List

struct node *insertfirst(struct node *,int x);
struct node *insertlast(struct node *,int x);
struct node *insertbetween(struct node *,int pos,int x);

// Delete Operation Using Linked List

struct node *deletefirst(struct node *);
struct node *deletelast(struct node *);
struct node *deletebetween(struct node *,int pos);

void display();

void main()
{
 int choice;
 first=null;
 clrscr();

// Choose a multiple Cases in Switch Statement

// Operation Using Insert, Delete.

 do
 {
  printf("\n****MENU*****");
  printf("\n1...InsertFirst****");
  printf("\n2...InsertLast*****");
  printf("\n3...InsertBetween**");

  printf("\n4...DeleteFirst****");
  printf("\n5...DeleteLast*****");
  printf("\n6...DeleteBetween**");

  printf("\n7...EXIT***********");

// Select a multiple choice.

  printf("\nEnter your choice:->");
  scanf("%d",&choice);

  switch(choice)
  {

// First Three Cases is Insert Operation.

     case 1:
		printf("\nEnter x:->");
		scanf("%d",&x);
		first=insertfirst(first,x);
		c= c+1;
		display();
		break;

       case 2:
		printf("\nEnter x:->");
		scanf("%d",&x);
		first=insertlast(first,x);
		display();
		break;

     case 3:
		printf("\nEnter position:->");
		scanf("%d",&pos);

		printf("\nEnter x:->");
		scanf("%d",&x);

		first=insertbetween(first,pos,x);
		display();
		break;

// Three Operation is a Delete Operation.

     case 4:
		first=deletefirst(first);
		display();
		break;


     case 5:
		first=deletelast(first);
		display();
		break;
    case 6:
		printf("\nEnter position:->");
		scanf("%d",&pos);
		first=deletebetween(first,pos);

		display();
		break;

// Exit Control 

    case 7:
		exit();
        }

  }
    while(choice!=7);
    getch();
}

struct node *insertfirst(struct node *first,int x)
{
   New=(struct node *)malloc(sizeof(int));
    if(first==null)
     {
       New->info=x;
       New->next=null;
       first=New;
       return(first);
     }

    else
     {
       New->info=x;
       New->next=first;

       first = New;
       return first;
     }
}

struct node *insertlast(struct node *first,int x)
{
  New=(struct node *)malloc(sizeof(int));

    if(first==null)
     {
       New->info=x;
       New->next=null;
       first=New;
       return first;
     }
    else
     {
       New->info=x;
       New->next=null;

       temp=first;

       while(temp->next!=null)
       {
	 temp=temp->next;
       }

       temp->next=New;
       return first;
     }
}

struct node *insertbetween(struct node *first,int pos,int x)
{
  New=(struct node *)malloc(sizeof(int));

    if(first==null)
     {
       New->info=x;
       New->next=null;
       first=New;
       return first;
     }
    else
     {
       New->info=x;

       temp=first;
       i=1;

       while(i<pos && temp->next!=null)
       {
         p=temp;
 	 temp=temp->next;
	 i++;
       }
      
       if (i == c-1)
       {
	  temp->next = New;
       }

       else
       !      
          p->next=New;
          New->next=temp;
	}

       return first;
     }
}

struct node *deletefirst(struct node *first)
{
    if(first==null)
     {
       printf("\nList is Empty at deletefirst");
       return(0);
     }
    else
     {
       temp=first;
       y=temp->info;
       printf("\nDelete Element:=>%d",y);
       first=first->next;
       free(temp);
       return first;
     }
}

struct node *deletelast(struct node *first)
{
    if(first==null)
     {
       printf("\nList is Empty at deletelast");
       return(0);
     }
    else
     {
       temp=first;
       while(temp->next!=null)
       {
	p=temp;
	temp=temp->next;
       }
       y=temp->info;
       printf("\nDelete Element:=>%d",y);
       p->next=null;
       free(temp);
       return(first);
     }

}
struct node *deletebetween(struct node *first,int pos)
{
      if(first==null)
       {
	printf("\nList is Empty at deletebetween");
	return(0);
       }

      else
       {
       temp=first;
       i=1;
       while(i<pos && temp->next!=null)
       {
	p=temp;
	temp=temp->next;
	i++;
       }
       y=temp->info;
       printf("\nDelete Element:=>%d",y);
       p->next=temp->next;
       free(temp);
       return first;
     }
}

void display()
{
  temp=first;

  while(temp->next!=null)
  {
   printf("\n\t%d\t",temp->info);
   temp=temp->next;
  }
   printf("\n\t%d\t",temp->info);
}
